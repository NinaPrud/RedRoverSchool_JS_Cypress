
//=================проверка на  массив (существует ли массив)
// 1. arr == null
// 2. !arr
// 3. через методы  Array.isArray(arr)

// function code (arr){
//     return arr == null ? -1 : arr.length;

// }
// let arr = [1, 2, 3]
// console.log(code(arr));


//---------------1 - проверка на null


// function code (arr){
//     return arr == null ? -1 : arr.length;

// }

// console.log(code());     // т.к массив не пришел - вернет -1
//                                // если массив будет, вернет его длинну

// //----------------2 вариант основан на булевой логике

// function code (arr){
//     //return arr ? arr.length : -1;
//     return !arr ? -1 : arr.length;   // более распространенный вариант
//     // тоже самое
//     // if (arr == null){
//     //     return -1
//     // } else {
//     //     return arr.length
//     }

// }

// console.log(code());


// //=========== математическое и булево преобразование
//   //------------- мат
//   let str = "1"
//   let str1 = "   1   "
//   let str2 = "   1  3   "
//   let num = 2
//   let bool = true
//   console.log(num + bool); // 3     true == 1, false == 0 
//   console.log(num + str);  // 21  с +   конкантинация если строка есть
//   console.log(num + str1); // 2  1
//   console.log(num + str2); // 2  1  3
//   console.log(num * str);  // 2  с *,/,-  умнож, дел, вычит, даже если строка есть
//   console.log(num * str1); // 2
//   console.log(num * str2); // NaN

//   //------------- буулево
//    // 0, null, undefined, Nan, "" -> false
//    // все остальное -> true


//=============== сортировка массива

//  // по возрвстанию  (сортировка пузырьком)
//  const arr = [10, 2, 4, 67, 97, 139, 3, 7];
//   // берем первый элемент массива и начинаем его сравнивать со всеми остальными
//      // и если он (следующий) меньше  - переставляем его на место предыдущего (меняем их местами)
//     //        10, 2
//     //         2, 10
//     //         2, 4
//     //          ...
//     //        [2, 10, 4, 67, 97, 139, 3, 7]
//     //         10, 4
//     //          4, 10
//     //          4, 3
//     //          3, 4
//     //         [2, 10, 4, 67, 139, 3, 7]
//     // т.е. находим миннимальрый элемент и ставим его на превое место, и так по всем проходимся

//   for (let i = 0; i < arr.length -1; i ++) {
//       for (let j = i + 1; j < arr.length; j++){
//           if (arr[i] > arr[j]) {   // меняем местами
//             let temp = arr[i];      
//             arr[i] = arr[j];
//             arr[j] = temp;
//           }
//       }
//   }

//     console.log(arr)  // [2,  3,  4, 7, 10, 67, 97, 139 ]
//     //  и теперь можно вывести, например, два максимальных числа ( в уже отсортированном массиве)
//     console.log(arr[arr.length -1])   //139
//     console.log(arr[arr.length -2])  // 97

//     // чтобы сделать убыванте меняем знак на <


// ====== !!! вложенные циклы используются при работе с вложенными массивами, сколько вложенных массивов, 
//столько и циклов вложенных добавляется!!!


//================= рисуем фигурки:

//---------------------------1
//1
//12
//123
//1234
//12345

let n = 5;
let str = '';

// for (let i = 1; i <= n; i++) {
//     for (let j = 1; j <= i; j++){
//         //str += j;
//         //str += 1;         // можно чем угодно наполнять
//         str += "*"// + " ";
//     }
//     str += '\n';
// }
// console.log(str);
// console.log("*********************************")

//------------------------------------2
//12345
//1234
//123
//12
//1

// str = "";
// for (let i = 1; i <= n; i++) {
//     for (let j = 1; j <= n - i + 1; j++) {
//         str += j;
//     }
//     str += "\n";
//   }
// console.log(str);
// console.log("*********************************")
//------------------------------------3
// 12345
// 2345
// 345
// 45
// 5

// str = "";
// for (let i = 1; i <= n; i++) {
//     for (let j = i ; j <=n; j++) {  // j = 1 + i - 1
//         str += j;
//     }
//     str += "\n";
// }
// console.log(str)
// console.log("*********************************")
// //-----------------------------------4
// //54321
// //4321
// //321
// //21
// //1

// str = "";
// for (let i = 1; i <= n; i++) {
//     for (let j = n + 1 - i; j >= 1; j--) {
//         str += j;
//     }
//     str += "\n"
// } 
// console.log(str)
// console.log("*********************************")
// //---------------------------5

// //54321
// //5432
// //543
// //54
// //5

// str = "";

// for (let i = 1; i <= n; i++) {
//     for (let j = n; j >= i; j--) {
//         str += j;
//     }
//     str += "\n";
// }
// console.log (str)

//-----------------------------6 с методом
//    1
//   12
//  123
// 1234
//12345

// str = "";
// for (let i = 1; i <= n; i++) {
//     str += " ".repeat(n-i);
//     for (let j = 1; j <= i; j++) {
//         str += j;
//     }
//     str += "\n";
// }
// console.log(str)

// //-----------------------------6.2  с двумя влож циклами

 str = "";

for (let i = 1; i <= n; i++) {
     for (let k = n - 1; k >= i; k--) {
        str += " ";
     } 
     for (let j = 1; j <= i; j++) {
        str += j;
     }
     str += "\n";
}
console.log(str)

//------------------------------------ ромбик

//    1
//   121
//  12321
// 1234321
//123454321
// 1234321
//  12321
//   121
//    1

// n = 5;
// str = "";

// for (let i = 1; i <= n; i++) {
//    for (let j = n - i; j > 0; j--) {
//       str += "*";
//    }
//    for (let k = 1; k <= i; k++) {     // ; k <= n + i - (n + 1);
//       str += k;
//    }
//    for (let l = i - 1; l >= 1; l--) {  //либо ; l >= n - (n - 1);
//       str += l;
//    }
 //  str += "\n";
//}
// for (let i = 1; i < n; i++) {
//    for (let j = 1; j <= i; j++) {
//       str += " ";
//    }
//    for (let k = 1; k < n - i; k++) {
//       str += k;
//    }
//    for (let l = n - i; l >= n - (n - 1); l--) {
//       str += l;
//    }
//    str += "\n";
// }
// console.log(str)

//======================================== задачки из кодворс

//-----1:25----- Filling an array (part 1) --- https://www.codewars.com/kata/571d42206414b103dc0006a1/train/javascript

//--------1:35------Count the Monkeys!	------  https://www.codewars.com/kata/56f69d9f9400f508fb000ba7/train/javascript

//-------1:39 -----Sum even numbers	https://www.codewars.com/kata/586beb5ba44cfc44ed0006c3/train/javascript

//-------1:40 ---- Coding 3min : Jumping Dutch act	https://www.codewars.com/kata/570bcd9715944a2c8e000009/train/javascript



