//=====================
// обычно то , что сам пишешь - это фуекцмя, а готовое уже - это метод
// но суть та же
// есть методы, которые работают только в вебе (alert)
//console.log()  это предзаписанный метод
// alert  например ( в node.js  он не работает)

// () - это обязательный признак функции

//============== объявление функции ===== 3 способа:
//    -1- function declaration (объявление функции)
//    -2- function expression (функциональное выражение)
//    -3- arrow function  (стрелочная функция) 

//-----------  -1-function declaration (объявление функции (классическое, используется чаще всего)

// 1. Слово function,
// 2. Имя функции    (обычно глагол)
// 3. Список параметров в круглых скобках через запятую, либо без параметров, но скобки нужны
// 4. Код функции ("тело функции"), внутри фигурных скобок
// Имя как и переменной те же символы может и  может содержать буквы, цифры, _$
// функцию нужно вызывать (после объявленея) ( function Invocation)

// три способа вызова функции:
// - когда происходит какое-либо событие/действие (пользователь кликает на кнопку на странице)(web)
// - когда она вызвана внутри JS кода (node.js)
// - автоматическое включение (если такое прописано внутри ее кода, например по счетчику)


//function name(param1, param2...) {         // ()
//        statements                         //утверждение
// return expression;                        //вoзвращаемое выражение
// };

// функцию можно вызывать из любой части кода (даже выше объявления!!!) КЛАССИЧЕСКУЮ - другие так нельзя

//print("вызов до")

// function print(arg) {
//     console.log(arg);
// }

// print('вызов после')              // в аргумент можно передать все и цифру и строку и массив...
// print([2,1])
// print(4)

// в функцию можно передавать другую функцию

// function sum() {
//     const a = 9;           //эти аргументы объявлены внутри функции,
//     const b = 4;            // они не будут видны за пределами функции

//     print(a + b);
// }
// sum()                //выведет в консоль сумму a  и  в
//console.log(a)       // выдаст ошибку, т.к. а щбъявлена внутри и не видна за пределами функции

// function sum(a,  b) {
//     let result = a + b

//     return result              // return  только возвращает, но не выводит в консоль
// }
// //sum(2, 2)

// let c = sum(5, 5)          // функции можно засовывать в переменные и везде
// console.log(c)


// - return  может находиться в любой части функции

// function sum(a, b) {

//     let result = a * b;
//     if (a > 0) {
//         return result
//     } else {
//         return result * (-1);
//     }

// }
// console.log(sum(-1, 4))


//Переменные объявленные внутри функции, видны только внутри этой функции

// !!! Но у функции есть доступ к внешним переменным:

// let name1 = "Anna";
// console.log(name1)         // Anna

// function showMessage() {
//     return name1 =  "Hi " + name1;  
//     //name1 = " 5"                // после return он уже name1  не увидит, это как выход из функции
// }
// console.log(showMessage());   // Hi Anna
// console.log(name1)            // Hi Anna

// приоритет отдается локальной переменной перед внешней (даже если одинаковове название)
// если передать в аргумент тоже название :

// let name1 = "Anna";                      //global
// console.log(name1)         // Anna

// function showMessage(name1) {            //local
//     return name1;  

// }
// console.log(showMessage("John"));   // John

// console.log(name1)                 // Anna   

// но если аргумент не передавать, то все равно выведет анну, даже при консоли джон

// let name1 = "Anna";
// function showMessage() {
//     return name1;  

// }
// console.log(showMessage("John"))   // Anna  

//  лучеше всегда передавать в параметры (т.е. не оставлять параметры пустыми) локальную переменную, с новым именем


// можно несколько функций вкладывать друг в друга:

// function showHi() {
//     return "Hi "
// }
// function showName(name) {
//     return name + "!"
// }
// function showMessage(myName) {
//     return showHi() + showName(myName)
// }
// console.log(showMessage("Nina"))      // Hi Nina


// - можно возвращать не только цифры через +, но конкотинировать строки, массивы:
//  цифры просто сложет

// function sum2(a, b) {
//     return a + b;
// }

// console.log(sum2("abc", [1, 2, 3]));   // abc1,2,3


// return  видит то, что написано на одной сторке, 
//если нужно в несколько строк сделать один  return -  надо брать его в скобки

// function sum2(a, b) {
//     return a + b;             // так  ПРАВИЛЬНО  либо  return(a + b)
// }

// function sum2(a, b) {
//     return
//         a + b;                // так НЕ правильно
// }

// function sum2(a, b) {
//     return (
//         a + b);             // так  ПРАВИЛЬНО
// }


// чаще всего делают так, что одна функция выполняет какой-то один шаг(делит, суммирует, обpезает,логинит и т.д.)
// лучше не нагружать в одну функцию несколько разных действий, чтоб потом было проще ее использовать
//если нужна какая-то массивная деятельность, лучше создать много маленьких функций и потом загрузить их в одну большую
//функция - это ЧТО НАДО СДЕЛАТЬ


//========= 2 способ объявления функций ====== function expression (функциональное выражение)
//           https://learn.javascript.ru/function-expressions


//   в function expression ставится точка с запятой ; на конце
//  а в function declaration нет (не обязательно)

// вы не можете использовать function expression до того, как вы ее объявили

//    //hello("Anna");       // не сработает - Cannot access 'hello' before initialization

// let hello = function(name) {
//   console.log("Hi, " + name);
// };

// hello("Anna"); 

//это фактически переменная внутрь которой положили функцию
// испльзуется реже, чем классическая, из-за усеченного функционала


//=============3 способ ==стрелочная функция== arrow function
// let sum = (a, b) => a + b;       //  let sum = () => a + b  

// console.log(sum(3, 9));

        //можно делать и внутри фигурных скобочек
        //даже нужно при более сложных стрелочных функциях, с несколькими выражениями
        // !! и в таких скобках обязательно надо использовать  return!!!!

let sum2 = (a, b) => { 
   return a + b
};                          //return!!!

console.log(sum2(3, 9));

// let sum3 = (a, b) => `Твои числа это: ${a}, ${b}  и сумма = `+ (a + b); // скобки после строки нужны для чисел

// console.log(sum3(3,9));

// // если один аргумент, то скобки вокруг параметров можно опустить (но это не очень)

// let double = n => n * 2;
// console.log(double(12));

// // Стрелочные функции часто используются в сайпрасе при написании тестов!
// // точка с запятой тоже нужна (что бы комп понимал, что это один кусок кода)
// // тоже нельзя использовать до того, как объявили